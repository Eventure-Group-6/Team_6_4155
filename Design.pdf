# Eventure - Design Document

## System Architecture

### Overview
Eventure is a web-based platform for college students to discover clubs and events. The system follows a client-server architecture with a Spring Boot backend and HTML/CSS/JavaScript frontend.

### Components

#### Frontend
- **HTML Pages**: Login, signup, main feed, discussion board
- **CSS Styling**: Responsive design with dark/light themes
- **JavaScript**: Client-side form validation and dynamic content

#### Backend (Spring Boot)
- **Controllers**: REST API endpoints for user, flyer, and organization management
- **Services**: Business logic layer
- **Repositories**: Data access layer using JPA
- **Entities**: Database models (Users, Flyers, Org, Comments, etc.)

#### Database (MySQL)
- **Users**: User account information
- **Flyers**: Event advertisements with popularity scores
- **Organizations**: Club/organization details
- **Comments**: User comments on flyers
- **SavedFlyers**: User's saved/favorite flyers
- **UserFeed**: Personalized user feeds

### Security
- Spring Security for authentication
- Session-based user management
- CORS configuration for cross-origin requests

### Key Features
1. **Authentication System**: Login/signup with session management
2. **CRUD Operations**: Full create, read, update, delete functionality
3. **User Sessions**: Persistent login sessions
4. **Data Persistence**: MySQL database integration
5. **Responsive Design**: Mobile-first approach

### API Design
RESTful API following standard HTTP methods:
- GET for retrieving data
- POST for creating new resources
- PUT for updating existing resources
- DELETE for removing resources

### Database Schema
- Primary keys: Auto-generated Long IDs
- Foreign keys: Relationships between entities
- Composite keys: For many-to-many relationships (SavedFlyers)

This design ensures scalability, maintainability, and follows industry best practices for web application development.