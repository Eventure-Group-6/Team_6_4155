# Eventure - UML Diagrams

## Class Diagram

### Entity Classes
```
Users
- id: Long
- username: String
- password: String
- email: String
+ getId(): Long
+ setId(Long): void
+ getUsername(): String
+ setUsername(String): void
+ getPassword(): String
+ setPassword(String): void
+ getEmail(): String
+ setEmail(String): void
```

```
Flyers
- id: Long
- orgId: Long
- flyerAdvert: String
- popularityScore: int
+ getId(): Long
+ setId(Long): void
+ getOrgId(): Long
+ setOrgId(Long): void
+ getFlyerAdvert(): String
+ setFlyerAdvert(String): void
+ getPopularityScore(): int
+ setPopularityScore(int): void
```

```
Org
- id: Long
- orgName: String
- orgOwner: String
+ getId(): Long
+ setId(Long): void
+ getOrgName(): String
+ setOrgName(String): void
+ getOrgOwner(): String
+ setOrgOwner(String): void
```

### Controller Classes
```
UserController
- userServices: UserServices
- userFeedServices: UserFeedServices
- savedFlyerServices: SavedFlyerServices
+ login(Map<String,String>, HttpSession): ResponseEntity
+ signup(Users): ResponseEntity
+ logout(HttpSession): ResponseEntity
+ getAllUsers(): ResponseEntity
+ getUserById(Long): ResponseEntity
+ updateUser(Long, Users): ResponseEntity
+ deleteUser(Long): ResponseEntity
```

## Sequence Diagram - User Login
1. User -> Frontend: Enter credentials
2. Frontend -> UserController: POST /api/login
3. UserController -> UserServices: authenticateUser()
4. UserServices -> UserRepo: findByEmail()
5. UserRepo -> Database: SELECT query
6. Database -> UserRepo: User data
7. UserRepo -> UserServices: Optional<Users>
8. UserServices -> UserController: Authentication result
9. UserController -> Frontend: JSON response
10. Frontend -> User: Login success/failure

## Database Schema
- Users (1) -> (N) UserFeed
- Flyers (1) -> (N) UserFeed
- Users (N) -> (N) SavedFlyers -> (N) Flyers
- Org (1) -> (N) Flyers
- Users (1) -> (N) Comments
- Flyers (1) -> (N) Comments